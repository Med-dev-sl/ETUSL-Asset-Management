rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function hasRole(role) {
      return isSignedIn() && getRole() == role;
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function hasPermission(permission) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return isSignedIn() && (
        isAdmin() || 
        userDoc.data.permissions[permission] == true
      );
    }

    function hasValidFields(requiredFields) {
      return request.resource.data.keys().hasAll(requiredFields);
    }

    // System settings
    match /systemSettings/{document} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Users collection
    match /users/{userId} {
      function validateNewUser() {
        let data = request.resource.data;
        return validateUserData() &&
          data.passwordHash is string &&
          data.passwordSalt is string;
      }

      function validateUpdate() {
        let diff = request.resource.data.diff(resource.data);
        return (
          !diff.affectedKeys().hasAny(['passwordHash', 'passwordSalt']) ||
          (data.passwordHash is string && data.passwordSalt is string)
        );
      }

      allow read: if isSignedIn() && (
        request.auth.uid == userId || 
        hasPermission('users.read')
      );
      allow create: if isAdmin() && validateNewUser();
      allow update: if (
        isAdmin() || (
          request.auth.uid == userId &&
          !request.resource.data.diff(resource.data).affectedKeys()
            .hasAny(['roles', 'permissions'])
        )
      ) && validateUpdate();
      allow delete: if isAdmin();

    // Roles collection
    match /roles/{roleId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Permissions collection
    match /permissions/{permissionId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Backup records
    match /backups/{backupId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Settings collections
    match /settings/{document} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();

      match /notifications/{document} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
      }
    }

    // Audit logs - append only, no modifications
    match /auditLogs/{logId} {
      allow create: if isAuthenticated() && 
        hasValidFields(['action', 'resource', 'timestamp', 'userId', 'userEmail']);
      allow read: if isAdmin();
      allow update, delete: if false;
    }

    function isValidInventoryItem() {
      let item = request.resource.data;
      return item.name is string && item.name.size() > 0 &&
        item.category in ['Office Supplies', 'Lab Supplies', 'IT Consumables', 'Cleaning Supplies', 'Medical Supplies', 'Other'] &&
        item.quantity is number && item.quantity >= 0 &&
        item.minStockLevel is number && item.minStockLevel >= 0 &&
        item.unit is string && item.unit.size() > 0 &&
        item.status in ['low', 'normal'] &&
        item.createdBy.id is string &&
        item.createdAt is timestamp &&
        item.updatedBy.id is string &&
        item.updatedAt is timestamp;
    }

    function isValidHistoryRecord() {
      let record = request.resource.data;
      return record.itemId is string &&
        record.itemName is string &&
        record.category is string &&
        record.action in ['created', 'updated', 'deleted', 'adjusted'] &&
        record.details is string &&
        (record.previousQuantity == null || record.previousQuantity is number) &&
        record.newQuantity is number &&
        record.quantityChange is number &&
        record.unit is string &&
        record.timestamp is timestamp &&
        record.updatedBy.id is string;
    }

    // Inventory Collection Rules
    match /inventory/{itemId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && isValidInventoryItem();
      allow update: if isAdmin() && isValidInventoryItem();
      allow delete: if isAdmin();
    }

    // Inventory History Rules
    match /inventoryHistory/{recordId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && isValidHistoryRecord();
      // History records should never be updated or deleted
      allow update, delete: if false;
    }

    // Audit Logs Rules
    match /auditLogs/{logId} {
      allow read: if isAuthenticated() && isAdmin();
      allow create: if isAuthenticated();
      // Audit logs should never be updated or deleted
      allow update, delete: if false;
    }

    // Asset Verification Rules
    match /assetVerifications/{verificationId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      // Verification records should never be updated or deleted
      allow update, delete: if false;
    }

    // Asset Collection Rules
    match /assets/{assetId} {
      allow read, write: if true;
      
      match /history/{historyId} {
        allow read, write: if true;
      }
    }
    
    // Asset Categories Collection Rules
    match /assetCategories/{categoryId} {
      allow read, write: if true;
    }
    
    // Departments Collection Rules
    match /departments/{departmentId} {
      allow read: if true;
      allow write: if true;
    }

    // Locations Collection Rules
    match /locations/{locationId} {
      allow read: if true;
      allow write: if true;
    }

    // Asset Department Assignments Collection Rules
    match /assetDepartments/{assignmentId} {
      allow read: if true;
      allow write: if true;
    }
    
    // Users Collection Rules
    match /users/{userId} {
      allow read: if true;
      allow create: if !exists(/databases/$(database)/documents/users/admin);
      allow update, delete: if true;
    }

    // Maintenance Collection Rules
    match /maintenance/{maintenanceId} {
      allow read, write: if true;
    }

    // Service Requests Collection Rules
    match /serviceRequests/{requestId} {
      allow read, write: if true;
    }

    // Procurement Requests Collection Rules
    match /procurementRequests/{requestId} {
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid));
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid));
      allow update: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        ((request.auth.uid == resource.data.requestedBy.id) || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') &&
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'updatedAt', 'updatedBy', 'approvalNote']));
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Vendors Collection Rules
    match /vendors/{vendorId} {
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid));
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
        request.resource.data.keys().hasAll(['name', 'email', 'createdAt', 'createdBy']);
      allow update: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
        request.resource.data.keys().hasAll(['name', 'email', 'updatedAt', 'updatedBy']);
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Purchases Collection Rules
    match /purchases/{purchaseId} {
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid));
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
        request.resource.data.keys().hasAll(['requestId', 'vendorId', 'status', 'createdAt', 'createdBy']);
      allow update: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
        request.resource.data.keys().hasAll(['requestId', 'vendorId', 'status', 'updatedAt', 'updatedBy']);
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Default rule for all other collections
    match /{document=**} {
      allow read, write: if true;
    }
  }
}
